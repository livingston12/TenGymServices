// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TenGymServices.Api.Plans.Persistence;

#nullable disable

namespace TenGymServices.Api.Plans.Migrations
{
    [DbContext(typeof(PlanContext))]
    [Migration("20240404183104_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.BillingCycleEntity", b =>
                {
                    b.Property<int>("BillingCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillingCycleId"));

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("TenureType")
                        .HasColumnType("int");

                    b.Property<int>("TotalCycles")
                        .HasColumnType("int");

                    b.HasKey("BillingCycleId");

                    b.HasIndex("PlanId");

                    b.ToTable("BillingCycles");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.FixedPriceEntity", b =>
                {
                    b.Property<int>("FixedPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FixedPriceId"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricingSchemeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FixedPriceId");

                    b.HasIndex("PricingSchemeId")
                        .IsUnique();

                    b.ToTable("FixedPrices");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.FrequencyEntity", b =>
                {
                    b.Property<int>("FrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrequencyId"));

                    b.Property<int>("BillingCycleId")
                        .HasColumnType("int");

                    b.Property<int>("IntervalCount")
                        .HasColumnType("int");

                    b.Property<int>("IntervalUnit")
                        .HasColumnType("int");

                    b.HasKey("FrequencyId");

                    b.HasIndex("BillingCycleId")
                        .IsUnique();

                    b.ToTable("Frequencies");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.PaymentPreferenceEntity", b =>
                {
                    b.Property<int>("PaymentPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentPreferenceId"));

                    b.Property<bool>("AutoBillOutstanding")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentFailureThreshold")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("SetupFeeFailureAction")
                        .HasColumnType("int");

                    b.HasKey("PaymentPreferenceId");

                    b.HasIndex("PlanId")
                        .IsUnique();

                    b.ToTable("PaymentPreferences");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.PlanEntity", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaypalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductPaypalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PlanId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.PricingSchemeEntity", b =>
                {
                    b.Property<int>("PricingSchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PricingSchemeId"));

                    b.Property<int>("BillingCycleId")
                        .HasColumnType("int");

                    b.HasKey("PricingSchemeId");

                    b.HasIndex("BillingCycleId")
                        .IsUnique();

                    b.ToTable("PricingSchemes");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.SetupFeeEntity", b =>
                {
                    b.Property<int>("SetupFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SetupFeeId"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentPreferenceId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SetupFeeId");

                    b.HasIndex("PaymentPreferenceId")
                        .IsUnique();

                    b.ToTable("SetupFees");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.TaxEntity", b =>
                {
                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Inclusive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Percentage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("TaxId");

                    b.HasIndex("PlanId")
                        .IsUnique();

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.BillingCycleEntity", b =>
                {
                    b.HasOne("TenGymServices.Api.Plans.Core.Entities.PlanEntity", "Plan")
                        .WithMany("BillingCycles")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.FixedPriceEntity", b =>
                {
                    b.HasOne("TenGymServices.Api.Plans.Core.Entities.PricingSchemeEntity", "PricingScheme")
                        .WithOne("FixedPrice")
                        .HasForeignKey("TenGymServices.Api.Plans.Core.Entities.FixedPriceEntity", "PricingSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PricingScheme");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.FrequencyEntity", b =>
                {
                    b.HasOne("TenGymServices.Api.Plans.Core.Entities.BillingCycleEntity", "billingCycle")
                        .WithOne("Frequency")
                        .HasForeignKey("TenGymServices.Api.Plans.Core.Entities.FrequencyEntity", "BillingCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("billingCycle");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.PaymentPreferenceEntity", b =>
                {
                    b.HasOne("TenGymServices.Api.Plans.Core.Entities.PlanEntity", "Plan")
                        .WithOne("PaymentPreference")
                        .HasForeignKey("TenGymServices.Api.Plans.Core.Entities.PaymentPreferenceEntity", "PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.PricingSchemeEntity", b =>
                {
                    b.HasOne("TenGymServices.Api.Plans.Core.Entities.BillingCycleEntity", "BillingCycle")
                        .WithOne("PricingScheme")
                        .HasForeignKey("TenGymServices.Api.Plans.Core.Entities.PricingSchemeEntity", "BillingCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingCycle");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.SetupFeeEntity", b =>
                {
                    b.HasOne("TenGymServices.Api.Plans.Core.Entities.PaymentPreferenceEntity", "PaymentPreference")
                        .WithOne("SetupFee")
                        .HasForeignKey("TenGymServices.Api.Plans.Core.Entities.SetupFeeEntity", "PaymentPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentPreference");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.TaxEntity", b =>
                {
                    b.HasOne("TenGymServices.Api.Plans.Core.Entities.PlanEntity", "Plan")
                        .WithOne("Tax")
                        .HasForeignKey("TenGymServices.Api.Plans.Core.Entities.TaxEntity", "PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.BillingCycleEntity", b =>
                {
                    b.Navigation("Frequency")
                        .IsRequired();

                    b.Navigation("PricingScheme")
                        .IsRequired();
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.PaymentPreferenceEntity", b =>
                {
                    b.Navigation("SetupFee")
                        .IsRequired();
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.PlanEntity", b =>
                {
                    b.Navigation("BillingCycles");

                    b.Navigation("PaymentPreference")
                        .IsRequired();

                    b.Navigation("Tax")
                        .IsRequired();
                });

            modelBuilder.Entity("TenGymServices.Api.Plans.Core.Entities.PricingSchemeEntity", b =>
                {
                    b.Navigation("FixedPrice")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
